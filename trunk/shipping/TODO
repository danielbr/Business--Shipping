######################################################
##  General TODO
######################################################
 
 * Perhaps pull the shipper-related stuff out of Business::Ship into Business::Shipper. 
 	- Then Packages can inherit all of the sub building, debugging, etc. functions from
	  Business::Ship.  USPS and UPS will then inherit what they need from Business::Shipper.
	- Business::Shipper would also be @ISA=Business::Ship.
	- Should be done without breaking backwards-compatibility.
 
 * Upgrade the debugging/error handling features: allow user to pass in a callback ref.
 
 * Documentation
 
 * Business::Ship::FedEx module
 	- Utilize the recently released Business::FedEx::DirectConnect module.

 * More flexible handling of SSL?
	- Allow the use of Net::SSLeay as well as Crypt::SSLeay?

 * Business::Ship::OldUPS interface?
 	- Utilize Business::UPS?  Advantage:  no username/id...
	
 * New feature ideas:
 	- Address Verification
	- Package Tracking
	- Service Availability
 	
 * Testing code needs a lot of work.
 
 * Use Params::Validate for parameter validation?
 
 * List Prerequisites in a Bundle module
 
######################################################
##  Interchange usertags TODO
######################################################

 * Test for ability to use within Safe?
	([perl]$Tag->ups_query('', '', '');[/perl]) 
	
######################################################
##  Business::Ship::USPS TODO
######################################################

 * Pull the test cases & responses out of the PDF docs and program them so 
   that they are a test case (commonly in the /t directory in most CPAN  
   modules) so that a user can plug their username and password in the 
   script, or via the build process and test that their account is 
   accepting data correctly.
   
 * Identify the different USPS interfaces (Standard Mail (what we're 
   working on), Priority Mail, International, ?Others? and pull the specs
   from the PDF's on how to structure the requests and parse the responses.
   
 * Support get_charges( 'service' ) for domestic types.

######################################################
##  Business::Ship::UPS TODO
######################################################
 
 * Tests that *I* should run:

	- All types (ground, air, etc.) 
	- World wide (several countries, states (Hawaii, Alaska), etc.)
	- Confirm that price returned > 0, and no error.  (If error, fail test and dispaly error).

 * Confirm thread-safety-ness.

 * Is non-ssl communication with either provider possible?	

 * Be able to handle "mal-formed XML doc" error return from UPS.  
 	- Right now, it still tries to parse as an XML doc.
 
 * UPS support for sending multiple simultaneous requests
	- (USPS had built-in support in the API for Intl)
 	- If they don't support it, try LWP::Parallel::UserAgent.
